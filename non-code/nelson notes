Nelson's notes
 
> submitting and loading for circuits(in workspace) -- POST request

> slider toggle for delay


VERY LOW PRIORITY
> fix clipOnPlace
	- L wires, cross wires, checking if a component can be rotated

> sort quizlet counter components by number which ones have finite amounts(don't show ones that are infinite)

> change attribute editor to only show needed inputs(textbox, etc)
	- remove delay from all wires
	- remove message from all but print

datastore/app server
	> save to datastore
	> save as to datastore
	> load from datastore
	> open using sharable link
	> open from profile page

--bugs to fix--
	Prob won't fix unless we are doing this after project over
	> CROSS and T wires CANNOT be used as OR gates, two inputs into them is very buggy!

--for Kenny--

	> hot keys for rotate, rotate all, rotate individually, delete, flip
	> make hot keys not get recognized in input boxes -- reference canvas.js(bottom)

	FIN > get rid of text selection on component menu

	FIN > ctrl-a starts at 0,8
		-ctrl-a and then rotate, it selects wrong and stuff disappears

	FIN > pathfinding takes any arbitrary grid and finds the path from point src to point dest
		- needs to write a getAtGrid() function for this arbitrary grid

	FIN > mouse left-drag, places wires from mouse down to mouse up.
		- based on found path, select the corresponding wire, rotate wires correctly.

	FIN > Mass movement, does not allow components to be moved to blocks that the selection is already on
		- so if the selection is 4x4, you cannot move it down.

	FIN > clipboard needs to paste in as components, not Objects
		- manually placing wire give correct component.logic()
		- pasting a wire does not give correct component.logic()

	FIN > Add to truth-table.js functions
		XOR support
		multiple character Label support 

	> function that checks if 2 boolean eqs are equal.

--for Mike--
	FIN > uploading
	> 12345 menu

	> search combos
	> seen/unseen notifications - reef
	> icons for open circuit, clone as owner

	> import to new splash screen & profile page
	> documentation



finished
	> fix bug when two outputs are pointed into each other, it breaks
		- check input locations

	> NOT gate no longer signal generating(only switches and on-blocks)

	> Circuit to boolean equation
		> find end block, then breadthTraversal and append to left and right of root(check whiteboard)

	> get rid of duplicate components in bftList

	> implemented crossing

	> Circuit Evaluator
		- if a circuit outputs the same as prev output, don't output.
		- if infinite loop, check for stackoverflow exception, catch and kill execution (in evaluator)

	> Implement 
		- buffer -- delays will only be for logic gates(including buffer)

	> implement ondelete() and onplace() functionality - when remove ON_BOX, whatever is on (that should be off) remains on
		- eg when you delete an ON_BOX it propagates a 0 through then removes itself
		- when you place an ON_BOX it propagates a 1 through
		- when you delete a switch it propagates an 0 through(unless it is already 0)
		- when you place a switch, it propagates a 1 through.

		- insert where you delete an item
		- insert where you place an item
		- take into consideration, mass rotation, mass selection, mass movement, cut/copy/paste, deletion.

	> render crossing correctly - depending on which i_wire is active, render accordingly

	> fix boolean equation and truth table to accept multiple character labels

	bug fix > 	Evaluator, make sure all outputs assign themselves to correct inputIndex
		-when we have 2 sets of i_wires connected to a cross and we turn both sets on them try to turn them off, it breaks(they dont turn off).

	> Delays - sort the bftList by delay order, if none have delays then doesn't matter the order but if they have delay then execute lowest delay, then subtract the lowest from second lowest and wait that time and keep doing it for wait(bftList[i+1].delay - bftList[i].delay).
	> remove delay option from all wires when buffer is added
	> AND, OR, XOR
	> NOT, BUFFER only stop on evaluation when delay is > 0

	- take the delay from the highest delay(say 500) - set as waitTime
	- begin waiting on the currDelay(say 300)
		once this delay is up, subtract from waitTime(200)
		execute all components with delay equal to currDelay(300)
		look at all the components that come back
			if any of them have a delay less than waitTime, insert them into the queue

	> saving/loading doesn't save delay/label/message

	> boolean equation to circuit - placing wires down
	- pathfinder algo - pathfind from gate A to gate B
		- i_wires are traversable, when u crossover an i_wire, it replaces it with a crossing wire.
		- breadth search, maybe A*?
	- clip onplace function, automatically set direction to match inputs/outputs of already placed wires/gates 
	- based on the found path, select the corresponding wire.
		> say we have path = [prevLoc, currLoc, nextLoc];
			when we are on currLoc and 
				prevLoc is above
				nextLoc is right
			then we would want an L_wire facing up.


	> deep copy function for components

	> flip AND, OR, XOR gates(change output directions accordingly and add flipped variable)

	> onplace looks at surrounding blocks and checks input
		- if logic is on, evaluate with itself as starting node

	> multi-line booleq
	example: 
		Cin = A * B; - looks for equation box with Cin and converts it to booleq, then checks if equal to the equation give
		A+B = A # B; - look for eq_box with A+B as label and ...

	Check if name exists when submitting if not add (1)
	> check if name exists.
		if exists: add a (1). eg) helloworld(1).
		else: accept

	> saving needs to save quizlet constraints

	> new images for crossing, light_bulb, switch, reskin everything



** Add new blocks **
	example: Light Bulb

	component.js 
		> add to getAllComponents()
		> make new constant at top -	var LIGHT_BOX_COMPONENT = "LIGHT"
		> make new function -			function light_box(label, x, y){}
		> if is wire or unarygate, add to isWire() or isUnaryGate() functions

	grid.js
		> add to getComponentByType(comp,x,y);

	index.html
		> add to <div class = "cmenu"></div>

	images.js
		> add active image constant
		> add regular image constant
		> add to getImageByComponentType(component);